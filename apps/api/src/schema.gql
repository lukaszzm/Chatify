# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Auth {
  """JWT access token"""
  accessToken: String!

  """JWT refresh token"""
  refreshToken: String!
  user: User!
}

type Chat {
  createdAt: DateTime!
  id: ID!
  isDeleted: Boolean!
  lastMessageAt: DateTime!
  messages: [Message!]!
  participants: [User!]!
  title: String
  type: ChatType!
  updatedAt: DateTime!
}

type ChatPreview {
  createdAt: DateTime!
  id: ID!
  isDeleted: Boolean!
  lastMessageAt: DateTime!
  latestMessage: Message!
  participants: [User!]!
  title: String
  type: ChatType!
  updatedAt: DateTime!
}

type ChatPreviewConnection {
  edges: [ChatPreviewEdge!]!
  pageInfo: PageInfo!
}

type ChatPreviewEdge {
  cursor: String!
  node: ChatPreview!
}

enum ChatType {
  Group
  OneToOne
}

input CreateNoteInput {
  title: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Message {
  chat: Chat!
  chatId: ID!
  content: String!
  createdAt: DateTime!
  id: ID!
  isDeleted: Boolean!
  isSeen: Boolean!
  sender: User!
  senderId: ID!
  updatedAt: DateTime!
}

type MessageConnection {
  edges: [MessageEdge!]!
  pageInfo: PageInfo!
}

type MessageEdge {
  cursor: String!
  node: Message!
}

type Mutation {
  """Create a new note without a content (empty note with title)"""
  createNote(data: CreateNoteInput!): Note!
  deleteAccount: User!

  """Delete a note"""
  deleteNote(noteId: String!): Note!
  refresh(refreshToken: String!): Token!
  sendMessage(data: SendMessageInput!): Message!
  signIn(data: SignInInput!): Auth!
  signUp(data: SignUpInput!): Auth!
  startChat(data: StartChatInput!): Chat!

  """Toggle lock on a note"""
  toggleLock(noteId: String!): Note!

  """Update a note content"""
  updateNote(content: String!, noteId: String!): Note!
  updatePassword(data: UpdatePasswordInput!): User!
  updateProfile(data: UpdateProfileInput!): User!
}

type Note {
  content: String!
  createdAt: DateTime!
  id: ID!
  isLocked: Boolean!
  title: String!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
}

input PaginationInput {
  skip: Int! = 0
  take: Int! = 10
}

type Query {
  chat(id: String!): Chat
  me: User!
  messages(after: String, chatId: String!, first: Int! = 10): MessageConnection!

  """Get a note by ID, if it belongs to the current user"""
  note(id: String!): Note

  """Get all notes for the current user"""
  notes: [Note!]!
  recentChats(after: String, first: Int! = 10): ChatPreviewConnection!
  users(excludeMe: Boolean! = true, order: SortOrder, pagination: PaginationInput, where: UserWhereInput): [User!]!
}

input SendMessageInput {
  chatId: String!
  content: String!
}

input SignInInput {
  email: String!
  password: String!
}

input SignUpInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
}

enum SortOrder {
  Asc
  Desc
}

input StartChatInput {
  participants: [String!]!
}

type Subscription {
  chatUpdated: ChatPreview!
  messageSent(chatId: String!): Message!
}

type Token {
  """JWT access token"""
  accessToken: String!

  """JWT refresh token"""
  refreshToken: String!
}

input UpdatePasswordInput {
  confirmPassword: String!
  currentPassword: String!
  newPassword: String!
}

input UpdateProfileInput {
  email: String!
  firstName: String!
  lastName: String!
}

type User {
  createdAt: DateTime!
  email: String!
  firstName: String!
  fullName: String!
  id: ID!
  isActive: Boolean!
  lastName: String!
  updatedAt: DateTime!
}

input UserWhereInput {
  email: String
  firstName: String
  fullName: String
  isActive: Boolean
  lastName: String
}